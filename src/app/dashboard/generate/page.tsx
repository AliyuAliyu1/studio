
"use client"

import { useEffect, useState } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { useToast } from "@/hooks/use-toast"
import { generateAndAnalyze, refineProjectContent } from "./actions"
import { Loader2, Sparkles, ThumbsUp, ThumbsDown, Meh, ArrowLeft, RefreshCw } from "lucide-react"
import type { AnalyzeFeedbackOutput, GenerateContentOutput } from "./actions"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"
import { useProjectsStore } from "@/lib/projects-store";
import { useRouter } from "next/navigation"
import { Project } from "@/lib/firebase/firestore"
import { MicrositeRenderer } from "@/components/microsite-renderer"

const formSchema = z.object({
  feedback: z.string().min(20, { message: "Feedback must be at least 20 characters." }),
  contentType: z.enum(["blog_post", "social_media_post", "microsite"], {
    required_error: "You need to select a content type.",
  }),
})

function ResultsDisplay({ analysis, content, onReset }: { analysis: AnalyzeFeedbackOutput | null; content: GenerateContentOutput | null, onReset: () => void }) {
    if (!analysis || !content) return null;
    const router = useRouter();

    const sentimentIcon = () => {
        switch (analysis.sentiment) {
            case 'positive': return <ThumbsUp className="h-5 w-5 text-green-500" />;
            case 'negative': return <ThumbsDown className="h-5 w-5 text-red-500" />;
            default: return <Meh className="h-5 w-5 text-yellow-500" />;
        }
    };
    
    const handleEditProject = () => {
        const { currentProjectId } = useProjectsStore.getState();
        if(currentProjectId) {
            router.push(`/dashboard/editor/${currentProjectId}`);
        }
    }

    return (
        <div className="space-y-8 mt-8">
            <div className="flex justify-between items-center">
                 <h2 className="text-2xl font-bold font-headline">Generation Complete!</h2>
                 <div>
                    <Button variant="outline" onClick={onReset} className="mr-2">
                        <ArrowLeft className="mr-2 h-4 w-4" /> Create New Content
                    </Button>
                    <Button onClick={handleEditProject}>
                        <Sparkles className="mr-2 h-4 w-4" /> Continue Editing & Refine
                    </Button>
                 </div>
            </div>
            <div className="grid lg:grid-cols-3 gap-8">
                <div className="lg:col-span-2">
                     {content.contentType === 'microsite' ? (
                        <MicrositeRenderer title={content.title} content={content.content} />
                    ) : (
                    <Card>
                        <CardHeader>
                            <CardTitle className="font-headline">{content.title}</CardTitle>
                            <CardDescription>
                                Here is the {content.contentType.replace('_', ' ')} generated by AI.
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            <Textarea value={content.content} readOnly className="h-96 text-base bg-gray-50" />
                        </CardContent>
                    </Card>
                    )}
                </div>
                <div>
                    <Card>
                        <CardHeader>
                            <CardTitle className="font-headline">Feedback Analysis</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div>
                                <h3 className="font-semibold mb-2 flex items-center gap-2">
                                    {sentimentIcon()}
                                    Sentiment: <span className="capitalize font-normal">{analysis.sentiment}</span>
                                </h3>
                            </div>
                            <div>
                                <h3 className="font-semibold mb-2">Key Themes</h3>
                                <div className="flex flex-wrap gap-2">
                                    {analysis.themes.map((theme, i) => <Badge key={i} variant="secondary">{theme}</Badge>)}
                                </div>
                            </div>
                            <div>
                                <h3 className="font-semibold mb-2">Key Insights</h3>
                                <p className="text-sm text-muted-foreground">{analysis.insights}</p>
                            </div>
                        </CardContent>
                    </Card>
                </div>
            </div>
        </div>
    )
}

export default function GeneratePage() {
  const [isLoading, setIsLoading] = useState(false)
  const [results, setResults] = useState<{ analysis: AnalyzeFeedbackOutput | null; content: GenerateContentOutput | null }>({ analysis: null, content: null });
  const { toast } = useToast()
  const router = useRouter();
  const { addProject, getProjectById, currentProjectId, setCurrentProjectId, updateProject } = useProjectsStore();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      feedback: "",
      contentType: undefined,
    },
  })

  useEffect(() => {
    const feedbackData = sessionStorage.getItem("feedbackData");
    const contentTypeData = sessionStorage.getItem("contentType") as "blog_post" | "social_media_post" | "microsite" | null;

    if (feedbackData && contentTypeData) {
      form.setValue("feedback", feedbackData);
      form.setValue("contentType", contentTypeData);
      sessionStorage.removeItem("feedbackData");
      sessionStorage.removeItem("contentType");
      onSubmit({ feedback: feedbackData, contentType: contentTypeData });
    }
  }, []);

  const resetForm = () => {
    form.reset();
    setResults({ analysis: null, content: null });
    setCurrentProjectId(null);
  }

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);

    try {
      const result = await generateAndAnalyze(values.feedback, values.contentType);
      
      if (result.content) {
          const newProjectId = await addProject({
              title: result.content.title,
              status: 'Active',
              contentItems: 1,
              content: result.content.content,
              contentType: result.content.contentType,
          });
          setCurrentProjectId(newProjectId); // Set as current project
          setResults(result); // Show results on the page
          toast({
              title: "Success!",
              description: "Content generated and analyzed successfully.",
              variant: "default",
          });
          // No need to redirect here anymore, results display on the same page
      } else {
          throw new Error("Failed to get content from generation result.");
      }
    } catch (error) {
        toast({
            title: "Error",
            description: error instanceof Error ? error.message : "An unknown error occurred.",
            variant: "destructive",
        });
        setResults({ analysis: null, content: null });
    } finally {
        setIsLoading(false);
    }
}


  return (
    <>
      <div className="flex justify-between items-start mb-4">
        <div>
          <h1 className="text-3xl font-bold font-headline">Generate Content from Feedback</h1>
          <p className="text-muted-foreground">
            Input customer feedback, choose a content type, and let our AI do the rest.
          </p>
        </div>
      </div>

     {(!results.content && !isLoading) && (
        <Card>
            <CardContent className="pt-6">
            <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                <FormField
                    control={form.control}
                    name="feedback"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel>Step 1: Input Feedback</FormLabel>
                        <FormControl>
                        <Textarea
                            placeholder="e.g., 'The new dashboard is incredibly intuitive and has saved our team hours of work!'"
                            className="min-h-[150px] text-base"
                            {...field}
                        />
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="contentType"
                    render={({ field }) => (
                    <FormItem className="space-y-3">
                        <FormLabel>Step 2: Choose Content Type</FormLabel>
                        <FormControl>
                        <RadioGroup
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                            className="flex flex-col sm:flex-row gap-4"
                        >
                            <FormItem className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                                <RadioGroupItem value="blog_post" />
                            </FormControl>
                            <FormLabel className="font-normal">Blog Post</FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                                <RadioGroupItem value="social_media_post" />
                            </FormControl>
                            <FormLabel className="font-normal">Social Media Post</FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                                <RadioGroupItem value="microsite" />
                            </FormControl>
                            <FormLabel className="font-normal">Microsite</FormLabel>
                            </FormItem>
                        </RadioGroup>
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                    )}
                />
                <Button type="submit" disabled={isLoading} size="lg">
                    {isLoading ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                    <Sparkles className="mr-2 h-4 w-4" />
                    )}
                    Generate Content
                </Button>
                </form>
            </Form>
            </CardContent>
        </Card>
      )}

      {isLoading && (
        <div className="flex justify-center items-center py-16">
            <Loader2 className="h-12 w-12 animate-spin text-primary" />
        </div>
      )}

      {results.content && <ResultsDisplay analysis={results.analysis} content={results.content} onReset={resetForm}/>}
    </>
  )
}
