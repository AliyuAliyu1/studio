"use client"

import { useState } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { useToast } from "@/hooks/use-toast"
import { generateAndAnalyze } from "./actions"
import { Loader2, Sparkles, ThumbsUp, ThumbsDown, Meh } from "lucide-react"
import type { AnalyzeFeedbackOutput, GenerateContentOutput } from "./actions"
import { Badge } from "@/components/ui/badge"

const formSchema = z.object({
  feedback: z.string().min(20, { message: "Feedback must be at least 20 characters." }),
  contentType: z.enum(["blog_post", "social_media_post", "microsite"], {
    required_error: "You need to select a content type.",
  }),
})

function ResultsDisplay({ analysis, content }: { analysis: AnalyzeFeedbackOutput | null; content: GenerateContentOutput | null }) {
    if (!analysis || !content) return null;

    const sentimentIcon = () => {
        switch (analysis.sentiment) {
            case 'positive': return <ThumbsUp className="h-5 w-5 text-green-500" />;
            case 'negative': return <ThumbsDown className="h-5 w-5 text-red-500" />;
            default: return <Meh className="h-5 w-5 text-yellow-500" />;
        }
    };

    return (
        <div className="grid lg:grid-cols-3 gap-8 mt-8">
            <div className="lg:col-span-2">
                <Card>
                    <CardHeader>
                        <CardTitle className="font-headline">Generated Content</CardTitle>
                        <CardDescription>
                            Here is the {content.contentType.replace('_', ' ')} generated by AI. You can edit it here.
                        </CardDescription>
                    </CardHeader>
                    <CardContent>
                        <Textarea defaultValue={content.content} className="h-96 text-base" />
                    </CardContent>
                </Card>
            </div>
            <div>
                <Card>
                    <CardHeader>
                        <CardTitle className="font-headline">Feedback Analysis</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <div>
                            <h3 className="font-semibold mb-2 flex items-center gap-2">
                                {sentimentIcon()}
                                Sentiment: <span className="capitalize font-normal">{analysis.sentiment}</span>
                            </h3>
                        </div>
                        <div>
                            <h3 className="font-semibold mb-2">Key Themes</h3>
                            <div className="flex flex-wrap gap-2">
                                {analysis.themes.map((theme, i) => <Badge key={i} variant="secondary">{theme}</Badge>)}
                            </div>
                        </div>
                         <div>
                            <h3 className="font-semibold mb-2">Key Insights</h3>
                            <p className="text-sm text-muted-foreground">{analysis.insights}</p>
                        </div>
                    </CardContent>
                </Card>
            </div>
        </div>
    )
}

export default function GeneratePage() {
  const [isLoading, setIsLoading] = useState(false)
  const [results, setResults] = useState<{ analysis: AnalyzeFeedbackOutput | null; content: GenerateContentOutput | null }>({ analysis: null, content: null });
  const { toast } = useToast()

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      feedback: "",
      contentType: undefined,
    },
  })

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true)
    setResults({ analysis: null, content: null });
    try {
      const result = await generateAndAnalyze(values.feedback, values.contentType)
      setResults(result);
      toast({
        title: "Success!",
        description: "Content generated and analyzed successfully.",
        variant: "default",
      })
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "An unknown error occurred.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <>
      <Card>
        <CardHeader>
          <CardTitle className="font-headline">Generate Content from Feedback</CardTitle>
          <CardDescription>
            Input customer feedback, choose a content type, and let our AI do the rest.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              <FormField
                control={form.control}
                name="feedback"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Step 1: Input Feedback</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="e.g., 'The new dashboard is incredibly intuitive and has saved our team hours of work!'"
                        className="min-h-[150px] text-base"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="contentType"
                render={({ field }) => (
                  <FormItem className="space-y-3">
                    <FormLabel>Step 2: Choose Content Type</FormLabel>
                    <FormControl>
                      <RadioGroup
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                        className="flex flex-col sm:flex-row gap-4"
                      >
                        <FormItem className="flex items-center space-x-3 space-y-0">
                          <FormControl>
                            <RadioGroupItem value="blog_post" />
                          </FormControl>
                          <FormLabel className="font-normal">Blog Post</FormLabel>
                        </FormItem>
                        <FormItem className="flex items-center space-x-3 space-y-0">
                          <FormControl>
                            <RadioGroupItem value="social_media_post" />
                          </FormControl>
                          <FormLabel className="font-normal">Social Media Post</FormLabel>
                        </FormItem>
                        <FormItem className="flex items-center space-x-3 space-y-0">
                          <FormControl>
                            <RadioGroupItem value="microsite" />
                          </FormControl>
                          <FormLabel className="font-normal">Microsite</FormLabel>
                        </FormItem>
                      </RadioGroup>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" disabled={isLoading} size="lg">
                {isLoading ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Sparkles className="mr-2 h-4 w-4" />
                )}
                Generate Content
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>

      {isLoading && (
        <div className="flex justify-center items-center py-16">
            <Loader2 className="h-12 w-12 animate-spin text-primary" />
        </div>
      )}

      <ResultsDisplay analysis={results.analysis} content={results.content} />
    </>
  )
}
